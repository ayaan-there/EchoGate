name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libsndfile1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports
      run: |
        python -c "import feature_extraction; print('‚úÖ Feature extraction module imported successfully')"
        python -c "import model_training; print('‚úÖ Model training module imported successfully')"
        python -c "import speaker_enrollment; print('‚úÖ Speaker enrollment module imported successfully')"
        python -c "import real_time_recognition; print('‚úÖ Real-time recognition module imported successfully')"
    
    - name: Test sample data creation
      run: |
        python create_sample_data.py
        echo "‚úÖ Sample data creation completed"
    
    - name: Validate project structure
      run: |
        python -c "
        import os
        required_files = ['streamlit_app.py', 'requirements.txt', 'config.py', 'README.md']
        for file in required_files:
          if os.path.exists(file):
            print(f'‚úÖ {file} exists')
          else:
            print(f'‚ùå {file} missing')
            exit(1)
        print('‚úÖ All required files present')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Security scan with bandit
      run: |
        bandit -r . -x ./venv/,./env/
    
    - name: Check for vulnerable packages
      run: |
        pip install -r requirements.txt
        safety check

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        echo "‚úÖ Deployment completed successfully"
